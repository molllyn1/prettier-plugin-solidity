// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Comments.sol 1`] = `
pragma solidity ^0.4.24;


contract Comments1 {
    function() {
        // solhint-disable-previous-line no-empty-blocks
    }

    function hello() public modifier1 modifier2 modifier3 modifier4 modifier5 modifier6 {
        // solhint-disable-previous-line no-empty-blocks
    }
}


contract Comments2 {
    // solhint-disable-previous-line no-empty-blocks
}


contract Comments3 is Interface1, Interface2, Interface3, Interface4, Interface5, Interface6 {
  // solhint-disable-previous-line no-empty-blocks

  function someFunction() {

  }/*1*//*2
  */
}

contract Comments4 is Interface1, Interface2, Interface3, Interface4, Interface5, Interface6 {
  // solhint-disable-previous-line no-empty-blocks
}

contract Comments5 /*nice name*/ {
  // solhint-disable-previous-line no-empty-blocks
}

contract Comments6 /*why the name \`Comments6\`*/ is Interface1/*why we used Interface1*/, Interface2/*why we used Interface2*/, Interface3, Interface4, Interface5, Interface6 {
  // solhint-disable-previous-line no-empty-blocks
}

contract Comments7 {
  function someFunction(
    uint a, // the first value
    uint b, // the second value
    uint c // the lats value
  ) {
    someFunction(
      a, // the first value
      b, // the second value
      c // the lats value
    );
  }
}

contract Comments8 {
  function someFunction() {
    // comment Before If
    if (condition /*comment inside condition*/) /*inside trueBody*/ {
      // comment trueBody
    } else  /*inside else if trueBody*/ if (condition1 /* comment inside condition1 */ && condition2 /* comment inside condition2 */) {

    }
    // everything failed
    else {

    }

    // comment Before If
    if (condition /*comment inside condition*/)
    // I'm before a trueBody
    return;
    else if (condition1 /* comment inside condition1 */ && condition2 /* comment inside condition2 */) return;
    // everything failed
    else return;
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pragma solidity ^0.4.24;


contract Comments1 {
    function() {
        // solhint-disable-previous-line no-empty-blocks
    }

    function hello()
        public
        modifier1
        modifier2
        modifier3
        modifier4
        modifier5
        modifier6
    {
        // solhint-disable-previous-line no-empty-blocks
    }
}


contract Comments2 {
    // solhint-disable-previous-line no-empty-blocks
}


contract Comments3 is
    Interface1,
    Interface2,
    Interface3,
    Interface4,
    Interface5,
    Interface6
{
    // solhint-disable-previous-line no-empty-blocks

    function someFunction() {} /*1*/
    /*2
     */
}


contract Comments4 is
    Interface1,
    Interface2,
    Interface3,
    Interface4,
    Interface5,
    Interface6
{
    // solhint-disable-previous-line no-empty-blocks
}


/*nice name*/
contract Comments5 {
    // solhint-disable-previous-line no-empty-blocks
}


/*why the name \`Comments6\`*/
contract Comments6 is
    Interface1, /*why we used Interface1*/
    Interface2, /*why we used Interface2*/
    Interface3,
    Interface4,
    Interface5,
    Interface6
{
    // solhint-disable-previous-line no-empty-blocks
}


contract Comments7 {
    function someFunction(
        uint256 a, // the first value
        uint256 b, // the second value
        uint256 c // the lats value
    ) {
        someFunction(
            a, // the first value
            b, // the second value
            c // the lats value
        );
    }
}

contract Comments8 {
    function someFunction() {
        // comment Before If
        if (
            condition /*comment inside condition*/
        ) {
            /*inside trueBody*/
            // comment trueBody
        } else if (
            condition1 && /* comment inside condition1 */
            condition2 /* comment inside condition2 */
        ) {
            /*inside else if trueBody*/
        } else {
            // everything failed
        }

        // comment Before If
        if (
            condition /*comment inside condition*/
        )
            // I'm before a trueBody
            return;
        else if (
            condition1 && /* comment inside condition1 */
            condition2 /* comment inside condition2 */
        )
            return;
            // everything failed
        else return;
    }
}

`;
